definitions:
  domain.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  domain.Rider:
    properties:
      location:
        $ref: '#/definitions/domain.Location'
      status:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: string
    type: object
  domain.User:
    properties:
      id:
        type: string
      lastName:
        type: string
      name:
        type: string
    type: object
  dto.BodyCreate:
    properties:
      id:
        type: string
      status:
        type: integer
    type: object
  dto.BodyUpdate:
    properties:
      status:
        type: integer
    type: object
  dto.ResponseCreate:
    properties:
      location:
        $ref: '#/definitions/domain.Location'
      status:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: string
    type: object
  dto.ResponseUpdate:
    properties:
      location:
        $ref: '#/definitions/domain.Location'
      status:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/riders:
    get:
      consumes:
      - application/json
      description: gets all riders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Rider'
            type: array
      summary: get all riders
    post:
      consumes:
      - application/json
      description: creates a new rider
      parameters:
      - description: Add rider
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/dto.BodyCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseCreate'
      summary: create rider
  /api/riders/{id}:
    get:
      description: gets a rider from the system by its ID
      parameters:
      - description: Rider id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Rider'
      summary: get rider
    put:
      consumes:
      - application/json
      description: updates a rider's information
      parameters:
      - description: Update rider
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/dto.BodyUpdate'
      - description: Rider id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseUpdate'
      summary: update rider
  /api/riders/{id}/location:
    put:
      consumes:
      - application/json
      description: updates a rider's location
      parameters:
      - description: Update rider
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/domain.Location'
      - description: Rider id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseUpdate'
      summary: update rider location
swagger: "2.0"
